import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'org.graalvm.buildtools.native'
    id("io.micronaut.application") version "2.0.6"
}

version = "0.1"
group = "io.seqera.tower.agent"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.seqera.tower.agent.*")
    }
}

def junitVersion = providers.gradleProperty('junit.jupiter.version')
        .forUseAtConfigurationTime()
        .get()

dependencies {
    annotationProcessor("info.picocli:picocli-codegen")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-graal")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2")
    implementation("io.micronaut.rxjava2:micronaut-rxjava2-http-client")
    implementation("info.picocli:picocli")
    implementation("javax.annotation:javax.annotation-api")
    implementation("javax.inject:javax.inject:1")
    runtimeOnly("ch.qos.logback:logback-classic")
    compileOnly("org.graalvm.nativeimage:svm")

    implementation("io.micronaut:micronaut-validation")

    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

application {
    mainClass.set("io.seqera.tower.agent.Agent")
}

String gitVersion() {
    def p = new ProcessBuilder().command('sh', '-c', 'git rev-parse --short HEAD').start()
    def r = p.waitFor()
    return r == 0 ? p.text.trim() : '(unknown)'
}

task buildInfo {
    doLast {
        def version = rootProject.file('VERSION').text.trim()
        def versionApi = rootProject.file('VERSION-API').text.trim()
        def commitId = gitVersion().trim()
        def info = """\
                    version=${version}
                    versionApi=${versionApi}
                    commitId=${commitId}
                """.stripIndent().toString()
        def f = file("src/main/resources/META-INF/build-info.properties")
        f.parentFile.mkdirs()
        f.text = info
    }
}

compileJava {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
    options.compilerArgs += ["-Aproject=${project.name}"]
    dependsOn buildInfo
}

test {
    useJUnitPlatform()
}


graalvmNative {
    binaries {
        main {
            imageName = 'tw-agent'
            mainClass = 'io.seqera.tower.agent.Agent'
            buildArgs(DefaultNativePlatform.currentOperatingSystem.isLinux() ? ['--static', '--libc=musl'] : [])
        }

        test {
            verbose = true
            agent = true
        }
    }
}



