name: Tower Agent continuous build
on:
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  linux-image:
    name: Linux
    if: "startsWith(github.event.ref, 'refs/tags/v') || !contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    container: public.ecr.aws/seqera-labs/graalvm-static:latest
    timeout-minutes: 90

    steps:
      - name: Environment
        run: env | sort

      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Install build-essentials
        run: DEBIAN_FRONTEND=noninteractive apt update && apt install --assume-yes --no-install-recommends build-essential zlib1g-dev && rm -rf /var/lib/apt/lists/*

      - name: Setup Graalvm
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: '21.2.0'
          java: 'java11'
          arch: 'amd64'

      - name: Install native-image component
        run: gu install native-image

      - name: Tests
        run: ./gradlew cleanTest test

      - name: Tests reports
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: linux-test-reports
          path: build/reports/tests/test/

      - name: Build Native Image
        run: ./gradlew nativeCompile

      - name: Upload linux native image artifact
        uses: actions/upload-artifact@v2
        with:
          name: tw_agent_linux
          path: build/native/nativeCompile/tw-agent

  mac-image:
    name: Mac
    if: "startsWith(github.event.ref, 'refs/tags/v') || !contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: macos-latest
    timeout-minutes: 90

    steps:
      - name: Environment
        run: env | sort

      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Setup Graalvm
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: '21.2.0'
          java: 'java11'
          arch: 'amd64'

      - name: Install native-image component
        run: gu install native-image

      - name: Tests
        run: ./gradlew cleanTest test

      - name: Tests reports
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: mac-test-reports
          path: build/reports/tests/test/

      - name: Build Native Image
        run: ./gradlew nativeCompile

      - name: Upload Mac native image artifact
        uses: actions/upload-artifact@v2
        with:
          name: tw_agent_mac
          path: build/native/nativeCompile/tw-agent

  windows-image:
    name: Windows
    if: "startsWith(github.event.ref, 'refs/tags/v') || !contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: windows-latest
    timeout-minutes: 90

    steps:
      - name: Environment
        run: env | sort

      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Add MSVC dev setup
        uses: ilammy/msvc-dev-cmd@v1.10.0

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3

      - name: Setup Graalvm
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: '21.2.0'
          java: 'java11'
          arch: 'amd64'

      - name: Install native-image component
        run: gu.cmd install native-image

      - name: Tests
        run: ./gradlew cleanTest test

      - name: Tests reports
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: windows-test-reports
          path: build/reports/tests/test/

      - name: Build Native Image
        run: ./gradlew nativeCompile

      - name: Upload Windows native image artifact
        uses: actions/upload-artifact@v2
        with:
          name: tw_agent_windows
          path: build/native/nativeCompile/tw-agent.exe

  release:
    name: Release
    if: "startsWith(github.event.ref, 'refs/tags/v')"
    needs: [linux-image, mac-image, windows-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download all build artifacts
        uses: actions/download-artifact@v2

      - name: Setup Java for JReleaser
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Version
        id: version
        run: |
          VERSION=$(cat ./VERSION)
          echo "VERSION = $VERSION"
          echo "::set-output name=VERSION::$VERSION"

      - name: Run JReleaser
        uses: jreleaser/release-action@v1
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PROJECT_VERSION: ${{ steps.version.outputs.VERSION }}
